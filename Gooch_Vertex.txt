#version 330

in vec3 vertex_position;
in vec3 vertex_normal;


//out vec3 LightIntensity;
out float NdotL;
out vec3 ReflectVec;
out vec3 ViewVec;
out vec3 n;

vec3 LightPosition = vec3 (0.0, 15.0, 4.0); // Light position in world coords.
vec3 Kd = vec3 (0.0, 0.0, 1.0); // blue diffuse surface reflectance
vec3 Ld = vec3 (1.0, 1.0, 1.0); // Light source intensity


//uniform vec3 LightPosition;

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;




void main(){

	
	mat4 ModelViewMatrix = view * model;
	mat3 NormalMatrix =  mat3(ModelViewMatrix);

	vec4 vertPos4 = ModelViewMatrix * vec4(vertex_position, 1.0);
	vec3 pos = vec3(vertPos4) / vertPos4.w;

	vec3 lightDir = normalize(vec3(LightPosition - pos));

	vec3 normal = normalize( NormalMatrix * vertex_normal);
	n = normalize(normal);

	ViewVec = normalize(-pos);
	ReflectVec = normalize(reflect(-lightDir, n));


	NdotL = max(dot(lightDir, n), 0.0);


	gl_Position = proj * view * model * vec4(vertex_position,1.0);

}